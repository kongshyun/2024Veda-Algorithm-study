- 📝 꼬리재귀란 무엇일까요? 꼬리 호출은 무엇일까요?

    💜꼬리재귀
        : 재귀 함수에서 마지막 작업이 자기 자신을 호출하는 경우를 말한다.
        즉, 함수가 자기 자신을 호출할때, 그 호출 이후에 더이상 추가적인 연산이 없는 
        재귀 형태를 말한다.
        -> 함수가 완료되기 전에 해야 할 작업이 남아 있지 않다는 의미.

    💜꼬리호출
        : 함수의 마지막 작업이 다른 함수를 호출하는 상황
        반드시 자기 자신을 호출하지 않아도 되며, 어떤 함수를 호출하는것이
        마지막 작업인 경우도 꼬리 호출로 간주.

        !! 꼬리호출 핵심:
            스택에 남겨진 추가 작업이 없다는 것이다.
            최적화를 통해 스택 프레임을 재사용 할 수 있다.

- 📝 꼬리 재귀의 형태로 만든다면 어떤점을 개선할 여지가 생기나요? (기본 재귀의 문제점과 비교하여)
    💜꼬리재귀의 큰 장점: 메모리 사용 효율성
        ->꼬리 재귀는 기본 재귀와 다르게 현재 함수의 스택 프레임을 재사용 할 수 있다.
            컴파일러는 기존 프레임을 덮어쓰고 새로운 함수 호출을 처리할수 있다.
                -> 스택 오버플로우 문제 예방


- 📝 C/C++ 컴파일러는 꼬리 호출 최적화를 지원해주나요?


    - 안해준다면, 그 이유는 무엇일까요?

        💜지원한다!
            GCC나 Clang같은 컴파일러는 꼬리 호출 최적화를 수행할 수 있다.
            컴파일러는 꼬리 호출이 발견되면 스택 프레임을 덮어쓰는 방식으로 처리하여 메모리 사용을 최적화 
            할수있따.

    - 해준다면, 그 이유는 무엇일까요?
        💜 메모리 사용절감: 스택프레임을 덮어쓰는 방식으로 함수호출을 처리함으로써,
                            스택 오버플로우를 방지 가능

        💜 성능 향상:
            꼬리 재귀의 경우 함수 호출이 반복되어도 메모리 소모가 일정하고, 
            함수 호출 비용이 줄어든다. 

    - 안해줄때의 이유와 트레이드-오프를 생각해보세요
        💜디버깅의 어려움
        , 스택프레임을 덮어쓰므로 함수가 한번도 호출되지 않은것처럼 보일수 있다.
         -> 함수의 호출 순서를 추적하기 어렵다.

         함수 호출의 복잡성
