📝 재귀 함수에는 반드시 _ _ 조건 이 필요하다!

    💚 종료 조건이 필요하다!!

---------------------------------
#include <stdio.h>

void infiniteRecursion(int n) {
    
    printf("Call %d\n", n);
    
    infiniteRecursion(n + 1); // 🙃 어딘가에 중요한 게 빠져있네요!
 
}

int main(void) {
    infiniteRecursion(1);
    return 0;
}


        💛-> 함수 내에 조건문이 빠져있다. 즉, 종료조건이 필요
        !!무한으로 함수를 호출 하면 스택 오버플로우를 일으키게 된다.


        💛-> 재귀함수에 종료조건이 필요한 이유?
            컴퓨터 메모리와 관련
            재귀함수가 호출될 때마다 함수 호출이 스택 메모리에 쌓이게 되는데,
            종료조건이 없다면 스택이 계속 쌓이면서 스택 오버플로우라는 문제가 발생할수있다.


---------------------------------
- 📝 재귀함수의 장단점은 무엇일까요?
    - 코드 (가독성) 관점
            💛
            -> (me) 가독성은 안좋은것 같다. 함수를 봤을때 생각이 필요하고 바로 머릿속에 읽히지는 않는다.
            -> (정답)
                복잡한 로직에서 가독성이 안좋다.
                종료조건이 명확하지 않거나 재귀 호출 경로가 복잡할때, 프로그램의 흐름을 파악하는것이 어렵다.
                
                디버깅이 어렵다.
                    재귀호출이 많은 경우 함수가 호츨되는 순서를 디버깅하기가 힘들어진다

    - 메모리 관점(키워드: 스택 프레임)
            💛
            -> 메모리 사용이 비교적 적은 경우,  효율적이라고 볼 수 있다.
            -> 스택 오버플로어가 생길수있다.
            -> 각 재귀호출은 , 새로운 함수의 지역변수, 매개변수 등을 저장하는 스택 프레임을 필요로 한다.
            즉 재귀호출이 깊어질수록 스택메모리의 사용이 기하급수적으로 증가할수있다.

    - 성능 관점(키워드: 함수 호출)
            💛
            -> 반복문으로는 구현하기 힘든 문제를 해결할수있다.
            -> 단점:
                함수 호출마다 스택 프레임을 저장하고 복원하는 작업이 포함되므로, 
                같은 작업을 반복문으로 처리할 때보다 성능이 떨어질 수 있다.
                - #프롤로그 
                  #에필로그

- 📝 재귀함수의 단점(한계점)을 해결하는 방법은 무엇일까요?

            💛꼬리재귀!( Tail Recursion )
                ->꼬리 재귀 최적화, 
                컴파일러가 꼬리 재귀를 최적화 할 수 있따.
                함수 호출이 마지막 작업으로만 이루어 질 때 해당 함수의 스택 프레임을 
                재사용할수있게 해준다.

                    ->  스택 오버플로우를 방지하면서도 재귀의 장점을 유지할수 있다.

            💛 반복문을 사용한다!

- 📝 한계점이 존재하는데, 재귀함수를 써야할까요? 한계점을 해결한 방법만 쓰면되지 않을까요?

    ->💛 문제의 구조가 재귀적일때나 코드의 가독성이 중요한 경우
        -> 트리탐색, 그래프탐색, 분할정복 같은 문제들에는 유용

    💛재귀 말고 다른걸 써야할때
        -> 성능이 중요할때. 메모리관련
        -> 메모리 효율이 중요한 경우 : 꼬리재귀를 사용하여 메모리 사용을 최소화.